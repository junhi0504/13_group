//Shape.cpp 파일
#include <iostream>
using namespace std;
#include "Shape.h"
void Shape::paint() {
	draw();
}

//Shape.h 파일
#ifndef SHAPE_H
#define SHAPE_H
class Shape {
	Shape* next;
protected:
	virtual void draw() = 0;
public:
	Shape() { next = NULL; }
	virtual ~Shape() {}
	Shape* add(Shape* p) { next = p; return p; }
	void paint();
	Shape* getNext() { return next; }
	void setNext(Shape* p) { this->next = p->next; }
};
#endif

//Line.cpp 파일
#include <iostream>
using namespace std;
#include "Line.h"

void Line::draw() {
	cout << "Line" << endl;
}

//Line.h 파일
#ifndef LINE_H
#define LINE_H
#include "Shape.h"
class Line : public Shape {
protected:
	virtual void draw();
};
#endif

//Circle.cpp 파일
#include <iostream>
using namespace std;
#include "Circle.h"
void Circle::draw() {
	cout << "Circle" << endl;
}

//Circle.h 파일
#ifndef CIRCLE_H
#define CIRCLE_H
#include "Shape.h"
class Circle : public Shape {
protected:
	virtual void draw();
};
#endif

//Rect.cpp 파일
#include <iostream>
using namespace std;
#include "Rect.h"
void Rect::draw() {
	cout << "Rectangle" << endl;
}

//Rect.h 파일
#ifndef RECT_H
#define RECT_H
#include "Shape.h"
class Rect : public Shape {
protected:
	virtual void draw();
};
#endif

//Graphic.cpp 파일
#include <iostream>
using namespace std;
#include "GraphicEditor.h"
#include "Line.h"
#include "Circle.h"
#include "Rect.h"
#include "Shape.h"
#include "UI.h"

GraphicEditor::GraphicEditor() {
    pStart = NULL;
    count = 0;
}
void GraphicEditor::create(int num) {
	switch (num) {
	case 1:
		if (count == 0) {
			pStart = new Line();
			pLast = pStart;
		}
		else
			pLast = pLast->add(new Line());
		count++;
		break;

	case 2:
		if (count == 0) {
			pStart = new Circle();
			pLast = pStart;
		}
		else
			pLast = pLast->add(new Circle());
		count++;
		break;

	case 3:
		if (count == 0) {
			pStart = new Rect();
			pLast = pStart;
		}
		else
			pLast = pLast->add(new Rect());
		count++;
		break;

	}
}
void GraphicEditor::indelete(int num) {
	Shape* p = pStart;
	Shape* del = pStart;

	if (num < count) {
		for (int i = 0; i < num; i++) {
			p = del;
			del = del->getNext();
		}
		if (num == 0)
			pStart = p->getNext();
		else
			p->setNext(del);
		count--;
		if (count == 1) pLast = pStart;
		delete del;

	}
	else
		cout << "인덱스를 잘못 입력하셨습니다." << endl;
}
void GraphicEditor::call() {
	bool exit = true;
	cout << "그래픽 에디터입니다." << endl;
	while (exit) {
		switch (UI::main_menu()) {
		case 1:
			create(UI::one_menu());
			break;
		case 2:
			indelete(UI::two_menu());
			break;
		case 3: {
			Shape* p = pStart;
			for (int i = 0; i < count; i++) {
				cout << i << ": "; p->paint();
				p = p->getNext();
			}
			break;
		}
		case 4:
			exit = false;
			break;

		}
	}
}

//Graphic.h 파일
#ifndef GRAPHICEDITOR_H
#define GRAPHICEDITOR_H
#include "Shape.h"
class GraphicEditor {
    Shape* pStart;
    Shape* pLast;
    int count;
public:
    GraphicEditor();
    void create(int num);
    void indelete(int num);
    void call();
};
#endif

//UI.cpp 파일
#include <iostream>
using namespace std;
#include "UI.h"

int UI::main_menu() {
	int key;
	cout << "삽입:1, 삭제:2, 모두보기:3, 종료:4 >> ";
	cin >> key;
	return key;
}
int UI::one_menu() {
	int key;
	cout << "선:1, 원:2, 사각형:3 >> ";
	cin >> key;
	return key;
}
int UI::two_menu() {
	int key;
	cout << "삭제하고자 하는 도형의 인덱스 >> ";
	cin >> key;
	return key;
}

//UI.h 파일
#include <string>
class UI {
public:
	static int main_menu();
	static int one_menu();
	static int two_menu();
};

//main.cpp 파일
#include <iostream>
using namespace std;
#include "Shape.h"
#include "Circle.h"
#include "Line.h"
#include "Rect.h"
#include "UI.h"
#include "GraphicEditor.h"

int main() {
	GraphicEditor* editor = new GraphicEditor;
	editor->call();
	delete editor;
	return 0;
}

//실행 결과
![image](https://github.com/junhi0504/13_group/assets/58690108/665b70ca-792e-403e-87b0-88296145ff10)
https://github.com/junhi0504/13_group/issues/1#issue-2000985506
