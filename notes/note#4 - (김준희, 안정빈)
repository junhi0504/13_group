1. Power& return_This() {                                    2. Power return_This() {
          return *this;                                               return *this;
   }  //정상 실행                                                }  //정상 실행

3. Power& return_This() {                                    4. Power * return_This() {
          return this;                                                 return this;
   }  //에러 발생                                                }  //정상 실행

5. Power return_This() {
          return this;
   }  //에러 발생

Q. 안정빈: *this와 this의 차이는 무엇인가?
A. 김준희: *this는 포인터의 참조 개념으로 자기 자신의 클래스 그 자체를 의미하고 this는 자기 자신을 가리키는 포인터이다.
Q. 김준희: 2번을 실행해본 결과 에러는 안나지만 값이 다른 이유는 무엇인가?
A. 안정빈: 2번의 경우 Power는 복사 생성자인 객체이므로 다른 값을 가리 킨다.

정리)
1번: Power는 참조가 반환되는 객체이고 *this는 자기 자신(객체)를 가리키는 포인터의 참조이다. 따라서 에러가 발생하지 않음
2번: Power는 복사로 생성된 객체이고 *this는 포인터의 참조이므로 에러가 발생하지는 않지만 주소값이 서로 다르다.
3번: this는 주소를 가리키는 포인터이고 Power는 참조이므로 에러 발생
4번: Power는 주소를 가리키는 객체이고 this 또한 주소를 가리키는 포인터이므로 에러가 발생하지 않음
5번: this는 객체가 아닌 주소를 가리키는 포인터이고 Power는 객체이므로 에러 발생

프렌드 함수: 클래스의 모든 멤버를 접근할 수 있도록 허용된 외부 함수나 다른 클래스의 멤버 함수
프렌드 선언 3종류
1. 외부 함수를 클래스에 프렌드로 선언
2. 다른 클래스의 멤버 함수를 클래스에 프렌드로 선언
3. 다른 클래스 전체를 클래스에 프렌드로 선언

연산자 중복: 일상 생활 속에서 '+'는 숫자 뿐 아니라 다른 곳에도 적용가능 ==> C++에서도 연산자 중복 가능 (본래 있던 연산자에 새로운 의미 정의)
예) 정수 더하기, 문자열 합치기, 색 섞기, 배열 합치기 
연산자 함수 구현 방법
1. 클래스의 멤버 함수로 구현
2. 외부 함수로 구현하고 클래스에 프렌드 함수로 선언
==> 리턴타입 operator연산자 (매개변수 리스트);

이항 연산자 중복: 피연산자가 두 개인 +, -, +=, == 등의 많은 이항 연산자를 중복할 수 있음
예) 1. Power operator+ (Power op2); 2. bool operator== (Power op2); 3. Power& operator+= (Power op2);

단항 연산자 중복: 피연산자가 하나 뿐인 연산자 ==> 전위, 후위 연산자
전위 연산자 중복 예) Power& operator++ ();
후위 연산자 중복 예) Power operator++ (int x);

예제 7-8, 예제 7-10 코드 작성 후 비교 논의 (안정빈 코드 작성)
Q. 안정빈: 7-8 전위 연산자 멤버 함수에서 *this 대신 this를 넣어주면 안되는가?
A. 김준희: 포인터의 참조(자기 자신의 클래스)를 나타내는 *this와 달리 this는 주소를 가리키는 포인터이고 
           Power는 참조이기 때문에 에러가 발생할 것이다.
Q. 김준희: 7-10 후위 연산자 멤버 함수는 어떻게 구현할 것인가?
A. 안정빈: 우선 임시 객체를 생성해주고 저장해준 뒤 연산 후 저장해둔 객체를 반환할 것이다.

예제 7-8 전위 ++ 연산자 멤버 함수
Power& Power::operator++() {
kick++;
punch++;
return *this; 
}  //kick, punch를 증가 후 변경된 객체 자신의 참조를 반환하였음
예제 7-10 후위 ++ 연산자 멤버 함수
Power Power::operator++(int x) {
Power tmp = *this; 
kick++;
punch++;
return tmp;
}  //증가 이전 객체 상태를 저장하고 kick, punch를 증가 후 증가 이전 상태를 반환하였음
따라서 예제 7-8의 경우 a와 b의 값이 출력될 때 변경된 값이 출력되지만 
예제 7-10의 경우 a는 바뀌지만 b값은 a가 증가되기 이전의 복사값을 가지므로 변경되지 않음

+연산자를 외부 프렌드 함수로 작성
Power operator+ (Power op1, Power op2) { 
  Power tmp;
  tmp.kick = op1.kick + op2.kick;
  tmp.punch = op1.punch + op2.punch; 
  return tmp;
}

단항 연산자 ++를 프렌드 함수로 작성
전위 연산자
Power& operator++ (Power& op) {
  op.kick++;
  op.punch++;
  return op;
}
후위 연산자
Power operator++ (Power& op, int x) {
  Power tmp = op;
  op.kick++;
  op.punch++;
  return tmp;
}

참조를 리턴하는 << 연산자
Power& Power::operator <<(int n) { 
kick += n;
punch += n;
return *this;
} //kick과 punch 정수 n을 더하고 참조를 리턴하는 << 연산자 함수
==> 참조를 리턴하지 않을 경우 연속된 << 연산이 정상 작동되지 않음
