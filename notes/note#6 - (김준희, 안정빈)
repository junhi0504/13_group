상속 관계에서의 함수 재정의: 파생 클래스에 기본 클래스와 동일한 형식의 함수가 중복 작성된 경우, 기본 클래스에 대한 포인터로는 기본 클래스에 선언된 함수를 호출하고, 
                           파생 클래스에 대한 포인터로는 파생 클레스에 선언된 함수를 호출한다.

가상 함수: virtual 키워드로 선언된 함수로, 컴파일러에게 자신에 대한 호출을 실행 시간까지 미루도록 지시
오버라이딩: 파생 클래스에서 기본 클래스의 가상 함수와 동일한 타입의 함수를 재작성하는 것

함수 재정의와 오버라이딩 사례비교
함수 재정의의 경우 객체에서 동등한 호출 기회를 가진 함수가 두 개가 존재하고 오버라이딩을 사용할 경우 두 개의 함수 중 가상 함수로 인해 하나의 함수가 존재감 상실
즉, 오버라이딩을 사용시 함수가 호출되는 실행 시간에 동적 바인딩이 일어나지만, 그렇지 않은 경우 컴파일 시간에 결정된 함수가 단순히 호출된다. (정적 바인딩)

예제 9-2 오버라이딩과 함수 재정의 차이
오버라이딩을 사용하지 않을 시 함수 Derived::f()와 Base::f()가 같이 선언되지만 가상 함수 virtual를 선언할 경우 Base::f()의 존재감 상실로 인해 Derived::f()만 호출

예제 9-3 main함수 구현
int main() {
	GrandDerived g;
	Base* bp;
	Derived* dp;
	GrandDerived* gp;
	bp = dp = gp = &g;
	bp->f();
	dp->f();
	gp->f();
} // 동적 바인딩으로 인해 GrandDerived::f() 호출

예제 9-4 
#include <iostream>
using namespace std;
class Shape {
public:
	virtual void draw() {
		cout << "--Shape--";
	}
};
class Circle : public Shape {
public:
	virtual void draw() {
		Shape::draw(); 
		cout << "Circle" << endl;
	}
};
int main() {
	Circle circle;
	Shape* pShape = &circle;
	pShape->draw();
	pShape->Shape::draw(); //범위 지정 연산자 ::로 인해 기본 클래스 Shape의 가상함수 정적 바인딩으로 호출
} 

추상 클래스: 함수의 코드가 없고 선언만 있는 가상 함수를 순수 가상 함수라 부르며, 최소한 하나의 순수 가상 함수를 가진 클래스
-> 온전한 클래스가 아니므르 인스턴 생성 X, 추상 클래스의 포인터는 선언 가능

예제 9-6 소멸 순서
소멸자를 가상 함수로 선언하면, 객체를 기본 클래스의 포인터로 소멸하든, 파생 클래스의 포인터로 소멸하든 파생 클래스와 기본 클래스의 소멸자를 모두 실행하는 정상적인 소멸의 과정이 진행됨
즉 예제 9-6 delete dp;의 경우 ~Derived() ~Base()가 호출되고 delete bp; 또한 ~Derived() ~Base()가 호출
-> 소멸자에 가상함수 virtual 키워드를 삭제할시 delete bp;에서 ~Base()만 호출됨

동적 바인딩 실행: 파생 클래스의 가상 함수 실행
main 함수는 Circle, Rect, Circle, Line, Rect 객체를 순서대로 생성하여 링크드 리스트로 연결 후 pStart 포인터가 처음 객체를, pLast 포인터가 마지막 객첼르 가리킴
Shape* p = pStart;
while (p != NULL) {
	p->paint();
	p = p->getNext();
} //Shape의 포인터 p를 사용하여 연결된 모든 객체를 방문하면서 paint() 함수를 호출하면, 
    paint()는 동적 바인딩을 통해 Circle, Rect, Line 클래스에서 재정의된 각 draw()함수 호출

예제 9-7 클래스 Adder와 Subractor 구현
class Adder : public Calculator {
protected:
	int calc(int a, int b) { // 순수 가상 함수 구현
		return a + b;
	}
};
class Subtractor : public Calculator {
protected:
	int calc(int a, int b) { // 순수 가상 함수 구현
		return a - b;
	}
}; //calc(int a, intb) 함수를 통해 파생클래스의 목적에 따라 매개 변수로 전달된 a와 b를 계산하여 결과를 리턴

동적 바인딩 실행 중 오버라이딩에 대한 이해한 점
void Circle::draw() { cout << "Circle" << endl; }
void Rect::draw() { cout << "Rectangle" << endl; }
void Line::draw() { cout << "Line" << endl; } 
-> 파생 클래스마다 다르게 구현하는 다형성, 파생 클래스들은 가상 함수인 draw() 함수를 오버라이딩 함으로써 어떠한 경우에도 자신이 만든 draw() 함수가 호출됨을 인정 받음
이후 객체를 생성하여 pStart와 pLast의 포인터가 처음 객체와 마지막 객체를 지정, 동적 바인딩을 통해 각 객체의 지정된 함수를 호출 후 링크드 리스트에 따라 다음 객체로 이동 반복
마지막으로 다음 주소를 임시로 q에 저장 후 delelte p;를 통해 현재 도형 객체를 소멸, 이후 q를 다시 p에 저장하며 반복 실행
따라서 복잡한 링크드 리스트에 연결된 객체들 또한 오버라이딩을 통해 보다 단순하게 구현할 수 있음을 알 수 있음



