스트림의 개념
데이터의 흐름, 혹은 데이터를 전송하는 소프트웨어 모듈
스트림의 양 끝에는 프로그램과 장치를 연결하여 바이트 단위로 입출력
입력 스트림: 입력 장치로부터 입력된 데이터를 순서대로 프로그램에 전달하는 객체
출력 스트림: 프로그램에서 출력한 데이터를 목적 장치로 순서대로 보내는 객체

C++ 입출력 스트림 버퍼
키 입력 스트림 버퍼: 입력장치로부터 입력된 데이터를 프로그램으로 전달하기 전에 일시 저장 -> 사용자의 키 입력이 끝난 시점에서 읽음         
스크린 출력 스트림 버퍼: 프로그램에서 출력된 데이터를 출력 장치로 보내기 전에 일시 저장 -> 버퍼가 꽉 차거나 강제 출력 명령 시에 출력 장치에 출력

C++ 표준 입출력 시스템은 스트림 입출력만 지원 -> 입출력 방식: 스트림 입출력 방식, 저 수준 입출력 방식

구 표준 C++입출력 라이브러리의 주요한 클래스로는 ios, istream, ostream, iostream 등이 있으며, 이들은 문자가 한 바이트로만 구성된 언어만 지원
-> 현재의 표준 c++ 입출력 라이브러리는 다양한 크기의 다국어 문자를 수용하기 위해, 입출력 라이브러리가 템플릿으로 작성

C++ 표 준 입출력 스트림 객체
C++ 프로그램이 실행될 때 자동으로 생겨나는 스트림
cin: itream타입의 스트림 객체로서 키보드 장치와 연결
cout: ostream 타입의 스트림 객체로서 스크린 장치와 연결
cerr: ostream 타입의 스트림 객체로서 스크린 장치와 연결, 오류 메시지를 출력할 목적, 스트림 내부 버퍼 거치지 않고 출력
clog: ostream 타입의 스트림 객체로서 스크린 장치와 연결, 오류 메시지를 출력할 목적, 스트림 내부 버퍼 거치고 출력

ostream 멤버 함수
ostream& put(char ch) //ch의 문자를 스트림에 출력
ostream& write(char* str, int n) //str 배열에 있는 n개의 문자를 스트림에 출력
ostream& flush() //현재 스트림 버퍼에 있는 내용 강제 출력

예제 11-1 main함수
int main() {
	cout.put('H');
	cout.put('i');
	cout.put(33); 
	cout.put('\n'); //ASCII 코드 33은 '!'문자로 Hi!출력 후 줄 바꿈

	cout.put('C').put('+').put('+').put(' '); //C++ 출력

	char str[] = "I love programming";
	cout.write(str, 6); //  str 배열의 6 개의 문자 "I love"를 스트림에 출력
}

istream 멤버 함수
int get() //입력 스트림에서 문자를 읽어 리턴, 오류나 EOF를 만나면 -1(EOF) 리턴
istream& get(char& ch) //입력 스트림에서 문자를 읽어 ch에 저장, 현재 입력 스트림 객체(*this)의 참조 리턴, 오류나 
                          EOF를 만나면 스트림 내부의 오류 플래그(failbit) 세팅

예제 11-2 get1(), get2() 함수 구현
void get1() {
	cout << "cin.get()로 <Enter> 키까지 입력 받고 출력합니다>>";
	int ch; 
	while ((ch = cin.get()) != EOF) {
		cout.put(ch); 
		if (ch == '\n')
			break; 
	}
}  //EOF와 비교 후 읽은 문자 출력, <Enter> 키 입력시 중단 -> cin.get()을 이용


void get2() {
	cout << "cin.get(char&)로 <Enter> 키까지 입력 받고 출력합니다>>";
	char ch;
	while (true) {
		cin.get(ch); 
		if (cin.eof()) break;
		cout.put(ch);
		if (ch == '\n')
			break; // <Enter> 키가 입력되면 읽기 중단
	}
}  //cin.get(ch)를 통해 문자를 읽은 후 EOF를 만나면 읽기 종료, 이후 문자 출력 -> cin.get(char&)을 이용

문자열 입력
istream& get(char* s, int n) // 입력 스트림으로부터 n-1개의 문자를 읽어 배열 s에 저장하고 마지막에 '\0'문자 삽입, 입력
                                도중 '\n'을 만나면 '\0'을 삽입하고 리턴

예제 11-3
int main() {
	char cmd[80];
	cout << "cin.get(char*, int)로 문자열을 읽습니다." << endl;
	while (true) {
		cout << "종료하려면 exit을 입력하세요 >> ";
		cin.get(cmd, 80); // 79개까지의 영어 문자 읽음.
		if (strcmp(cmd, "exit") == 0) {
			cout << "프로그램을 종료합니다....";
			return 0;
		}
		else
			cin.ignore(1); // 버퍼에 남아 있는 <Enter> 키 ('\n') 제거
	}
}

한 줄 읽기
istream& get(char* s, int n, char delim= '\n') //최대 n-1개의 문자를 읽어 배열 s에 저장, '\0'문자 삽입, delim에 지정된
                                                  구분 문자 만날시 읽은 문자 s에 저장하고 리턴
istream& getline(char* s, int n, char delim= '\n') //get()과 동일, delim에 지정된 구분 문자를 스트림에서 제거

예제 11-4 get(), getline() 비교
