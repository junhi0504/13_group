스트림의 개념
데이터의 흐름, 혹은 데이터를 전송하는 소프트웨어 모듈
스트림의 양 끝에는 프로그램과 장치를 연결하여 바이트 단위로 입출력
입력 스트림: 입력 장치로부터 입력된 데이터를 순서대로 프로그램에 전달하는 객체
출력 스트림: 프로그램에서 출력한 데이터를 목적 장치로 순서대로 보내는 객체

C++ 입출력 스트림 버퍼
키 입력 스트림 버퍼: 입력장치로부터 입력된 데이터를 프로그램으로 전달하기 전에 일시 저장 -> 사용자의 키 입력이 끝난 시점에서 읽음         
스크린 출력 스트림 버퍼: 프로그램에서 출력된 데이터를 출력 장치로 보내기 전에 일시 저장 -> 버퍼가 꽉 차거나 강제 출력 명령 시에 출력 장치에 출력

C++ 표준 입출력 시스템은 스트림 입출력만 지원 -> 입출력 방식: 스트림 입출력 방식, 저 수준 입출력 방식

구 표준 C++입출력 라이브러리의 주요한 클래스로는 ios, istream, ostream, iostream 등이 있으며, 이들은 문자가 한 바이트로만 구성된 언어만 지원
-> 현재의 표준 c++ 입출력 라이브러리는 다양한 크기의 다국어 문자를 수용하기 위해, 입출력 라이브러리가 템플릿으로 작성

C++ 표 준 입출력 스트림 객체
C++ 프로그램이 실행될 때 자동으로 생겨나는 스트림
cin: itream타입의 스트림 객체로서 키보드 장치와 연결
cout: ostream 타입의 스트림 객체로서 스크린 장치와 연결
cerr: ostream 타입의 스트림 객체로서 스크린 장치와 연결, 오류 메시지를 출력할 목적, 스트림 내부 버퍼 거치지 않고 출력
clog: ostream 타입의 스트림 객체로서 스크린 장치와 연결, 오류 메시지를 출력할 목적, 스트림 내부 버퍼 거치고 출력

ostream 멤버 함수
ostream& put(char ch) //ch의 문자를 스트림에 출력
ostream& write(char* str, int n) //str 배열에 있는 n개의 문자를 스트림에 출력
ostream& flush() //현재 스트림 버퍼에 있는 내용 강제 출력

예제 11-1 main함수
int main() {
	cout.put('H');
	cout.put('i');
	cout.put(33); 
	cout.put('\n'); //ASCII 코드 33은 '!'문자로 Hi!출력 후 줄 바꿈

	cout.put('C').put('+').put('+').put(' '); //C++ 출력

	char str[] = "I love programming";
	cout.write(str, 6); //  str 배열의 6 개의 문자 "I love"를 스트림에 출력
}

istream 멤버 함수
int get() //입력 스트림에서 문자를 읽어 리턴, 오류나 EOF를 만나면 -1(EOF) 리턴
istream& get(char& ch) //입력 스트림에서 문자를 읽어 ch에 저장, 현재 입력 스트림 객체(*this)의 참조 리턴, 오류나 
                          EOF를 만나면 스트림 내부의 오류 플래그(failbit) 세팅

예제 11-2 get1(), get2() 함수 구현
void get1() {
	cout << "cin.get()로 <Enter> 키까지 입력 받고 출력합니다>>";
	int ch; 
	while ((ch = cin.get()) != EOF) {
		cout.put(ch); 
		if (ch == '\n')
			break; 
	}
}  //EOF와 비교 후 읽은 문자 출력, <Enter> 키 입력시 중단 -> cin.get()을 이용
void get2() {
	cout << "cin.get(char&)로 <Enter> 키까지 입력 받고 출력합니다>>";
	char ch;
	while (true) {
		cin.get(ch); 
		if (cin.eof()) break;
		cout.put(ch);
		if (ch == '\n')
			break; // <Enter> 키가 입력되면 읽기 중단
	}
}  //cin.get(ch)를 통해 문자를 읽은 후 EOF를 만나면 읽기 종료, 이후 문자 출력 -> cin.get(char&)을 이용

문자열 입력
istream& get(char* s, int n) // 입력 스트림으로부터 n-1개의 문자를 읽어 배열 s에 저장하고 마지막에 '\0'문자 삽입, 입력
                                도중 '\n'을 만나면 '\0'을 삽입하고 리턴

예제 11-3
int main() {
	char cmd[80];
	cout << "cin.get(char*, int)로 문자열을 읽습니다." << endl;
	while (true) {
		cout << "종료하려면 exit을 입력하세요 >> ";
		cin.get(cmd, 80); // 79개까지의 영어 문자 읽음.
		if (strcmp(cmd, "exit") == 0) {
			cout << "프로그램을 종료합니다....";
			return 0;
		}
		else
			cin.ignore(1); // 버퍼에 남아 있는 <Enter> 키 ('\n') 제거
	}
}

한 줄 읽기
istream& get(char* s, int n, char delim= '\n') //최대 n-1개의 문자를 읽어 배열 s에 저장, '\0'문자 삽입, delim에 지정된
                                                  구분 문자 만날시 읽은 문자 s에 저장하고 리턴
istream& getline(char* s, int n, char delim= '\n') //get()과 동일, delim에 지정된 구분 문자를 스트림에서 제거

예제 11-4 get(), getline() 비교
cin.getline(line, 80);을 cin.get(line, 80);으로 변경 시 입력 스트림에 delim 문자가 버퍼에 그대로 남아 무한 루프에 빠짐 


입력 문자 건너 뛰기와 문자 개수 알아내기
istream& ignore(int n=1, int delim=EOF) // 입력 스트림에서 n개 문자 제거, delim 문자를 만나면 문자를 제거하고 리턴
int gcout() // 최근에 입력 스트림에서 읽은 바이트 수 리턴, <Enter> 키도 개수에 포함

포맷 입출력
C++에서도 입출력 시 포맷 지정 가능
포맷 플래그를 설정하거나, 포맷 함수를 호출하거나, 조직자를 이용
조작자는 매개 변수 없는 조작자와 매개 변수를 하나 가진 조작자로 구분되며, endl, dec, hex, left, right,
skipws, boolalpha, setfill, setw 등이 있다

예제 11-5 
int main() {
	cout << 30 << endl; // 10진수로 출력
	cout.unsetf(ios::dec); // 10진수 해제
	cout.setf(ios::hex); // 16진수로 설정
	cout << 30 << endl;
	cout.setf(ios::showbase); // 16진수로 설정
	cout << 30 << endl;
	cout.setf(ios::uppercase); // 16진수의 A~F는 대문자로 출력
	cout << 30 << endl;
	cout.setf(ios::dec | ios::showpoint); // 10진수 표현과 동시에 소숫점 이하 나머지는 0으로 출력
	cout << 23.5 << endl;
	cout.setf(ios::scientific); // 실수를 과학산술용 표현으로 출력
	cout << 23.5 << endl;
	cout.setf(ios::showpos); // 양수인 경우 + 부호도 함께 출력
	cout << 23.5;
}

포맷 함수 활용
int width(int minWidth) //출력되는 필드의 최소 너비를 minWidth로 설정하고 이전에 설정된 너비 값 리턴
char fill(char cFill) //필드의 빈칸을 cFill 문자로 채우도록 지정하고 이전 문자 값 리턴
int precision(int np) //출력되는 수의 유효 숫자 자리 수를 np개로 설정, 정수 부분과 소수점 이하의 수의 자리를 모두 포함하고 소수점 제외

조작자
조작자(manipulator) 혹은 스트림 조작자
ANSI/IOS 표준 C++ 헤더 파일에 정의된 특별한 원형을 가진 함수로, 매개 변수 없는 조작자와 매개 변수를 하나 가진 조작자로 구분

예제 11-7
int main() {
	cout << hex << showbase << 30 << endl;
	cout << dec << showpos << 100 << endl;
	cout << true << ' ' << false << endl;
	cout << boolalpha << true << ' ' << false << endl; // boolalpha 조작자에 의해 "true", "false' 문자열로 출력
} 

삽입 연산자와 추출 연산자
1 삽입 연산자(<<)는 스트림에 데이터를 출력하기 위해 ostream 클래스에 작성된 연산자 -> 시프트 연산이 아닌 중복 연산자로 사용
2 추출 연산자(>>)는 스트림으로부터 데이터를 입력받기 위해 istream 클래스에 작성된 연산자
3. 사용자는 자신이 작성한 클래스의 객첼르 출력하거나 입력받기 위해, 삽입 연산자, 추출 연산자를 따로 작성할 수 있다.
사용자가 작성한 클래스가 UserClass라고 할 때, 이 두 연산자 함수의 원형
ostream& operator << (ostream& outs, UserClass obj); 
itream& operator >> (istream& ins, UserClass& obj);

cout<<p;를 위한 << 연산자 만들기
cout. << (p);는 컴파일에 의해 << (cout, p)로 변경 -> 외부 연산자 함수 필요

예제 11-9 프렌드 함수 구현
friend ostream& operator << (ostream& stream, Point a); // private에 있는 x,y,를 접근하기 위해 friend로 선언
ostream& operator << (ostream& stream, Point a) {
	stream << "(" << a.x << "," << a.y << ")";
	return stream;
} 
-> main함수 Point p; cout << p;는 cout. << (Point p);와 <<(cout stream, Point p); 2개 중 컴파일에 의해 2번으로 해석

예제 11-11 추출 연산자 구현
istream& operator >> (istream& ins, Point& a) {
	cout << "x 좌표>>";
	ins >> a.x;
	cout << "y 좌표>>";
	ins >> a.y;
	return ins;
}

사용자 조작자 만들기
사용자는 새로운 조작자를 만둘 수 있다. 조작자 함수의 원형
ostream& manipulatorFunction (ostream& outs); // 출력 스트림에 사용되는 조작자 원형
istream& manipulatorFunction (istream& ins); // 입력 스트림에 사용되는 조작자 원형

예제 11-12 사용자 조작자 구현
ostream& fivestar(ostream& outs) {
	return outs << "*****";
}
ostream& rightarrow(ostream& outs) {
	return outs << "---->";
}
ostream& beep(ostream& outs) {
	return outs << '\a';
}

예제 11-13
istream& question(istream& ins) {
	cout << "거울아 거울아 누가 제일 예쁘니?";
	return ins;
} // 조작자 작성
int main() {
	string answer;
	cin >> question >> answer; // 조작자 사용
	cout << "세상에서 제일 예쁜 사람은 " << answer << "입니다." << endl;
} 


*예제 11-4 함수 구현 중 get()와 getline()에 대해서 고민한 점*
cin.getline()을 cin.get()으로 변경 시 무한 루프에 빠지는 원인은 무엇이며 어떻게 해결해야 하는가?
-> get()은 getline()과 다르게 delim 문자를 스트림 버퍼에서 제거하지 않아 이로 인해 무한 루프가 발생한다.
따라서 cin.ingore();을 추가해주어 따로 delim 문자를 제거해주면 무한 루프 문제를 해결할 수 있다.
